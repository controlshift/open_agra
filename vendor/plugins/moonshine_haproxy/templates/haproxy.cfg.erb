global
  # maximum number of simultaneous active connections from an upstream web server
  maxconn <%= configuration[:haproxy][:maxconn] || 4096 %>

  log   <%= configuration[:haproxy][:syslog_host] || '127.0.0.1' %>   <%= configuration[:haproxy][:syslog_facility] || 'local0' %> <%= configuration[:haproxy][:log_level] || 'info' %>

  # Distribute the health checks with a bit of randomness
  spread-checks 5

  # Uncomment the statement below to turn on verbose logging
  #debug

  <%= configuration[:haproxy][:globals].join("\n") if configuration[:haproxy][:globals] %>

# Settings in the defaults section apply to all services (unless you change it,
# this configuration defines one service, called rails).
defaults

  # apply log settings from the global section above to services
  log global

  # Proxy incoming traffic as HTTP requests
  mode http

  # Distribute incoming requests between Mongrels by connection count
  balance leastconn

  # Maximum number of simultaneous active connections from an upstream web server 
  # per service
  maxconn <%= configuration[:haproxy][:maxconn_service] || 4096 %>

  # Log details about odd HTTP requests
  option httplog
  option log-separate-errors

  # Abort request if client closes its output channel while waiting for the 
  # request. HAProxy documentation has a long explanation for this option.
  option abortonclose

  # Enable insertion of the X-Forwarded-For header to requests sent to servers
  option forwardfor

  # Check if a "Connection: close" header is already set in each direction,
  # and will add one if missing.
  option forceclose
  option httpclose

  timeout client <%= configuration[:haproxy][:client_timeout] || '4s'%>

  timeout connect <%= configuration[:haproxy][:connect_timeout] || '15s'%>

  timeout server <%= configuration[:haproxy][:server_timeout] || '15s'%>

  timeout check <%= configuration[:haproxy][:check_timeout] || '10s'%>
<% if configuration[:haproxy][:http_request_timeout] %>
  timeout http-request <%= configuration[:haproxy][:http_request_timeout] %>
<% end %>

  # Remove the server from the farm gracefully if the health check URI returns
  # a 404. This is useful for rolling restarts.
  option httpchk
  http-check disable-on-404

  # Balance requests between all backup servers instead of using only the first one.
  option allbackups

  # Error pages to display instead of the defaults if configured.
  <% 
  if configuration[:haproxy][:errorfiles]
    configuration[:haproxy][:errorfiles].each do |k,v|
  %>
  errorfile <%= k %> <%= v %>
  <%
    end
  end
  %>

  # Enable the statistics page 
  stats enable
  stats uri     /haproxy?stats
<% if configuration[:haproxy][:stats_auth] %>
  stats auth <%= configuration[:haproxy][:stats_auth] %>
<% end %>

  # Create a monitorable URI which returns a 200 if haproxy is up
  monitor-uri /haproxy-monitor

  <%= configuration[:haproxy][:defaults].join("\n") if configuration[:haproxy][:defaults] %>

<% configuration[:haproxy][:backends].each do |backend| %>
backend <%= backend[:name] %>
  <%= "balance #{backend[:balance]}" if backend[:balance] %>
  <%= backend[:options].join("\n") if backend[:options] %>
  <% backend[:servers].each do |server| %>
  server <%= server[:name] %> <%= server[:url] %> <%= "weight #{server[:weight]} " if server[:weight] %><%= "maxconn #{server[:maxconn]} " if server[:maxconn] %> <%= server[:options].join(" ") if server[:options] %>
  <% end %>
<% end %>

frontend rails
  bind 0.0.0.0:80
  capture request header Host len 15
  mode http
  option httplog
  log global

  default_backend <%= configuration[:haproxy][:default_backend] %>

  # ACLs
  #
  # Defines rules used to assign requests to backends later

  <% configuration[:haproxy][:acl_list].each do |acl| %>
  <%= "acl #{acl}" %>
  <% end if configuration[:haproxy][:acl_list] %>

  # Rules
  #
  # use_backend is used with ACLs from above to control which requests go to 
  # which backends
  #
  # There may be as many "use_backend" rules as desired. All of these rules are
  # evaluated in their declaration order, and the first one which matches will
  # assign the backend.

  <% configuration[:haproxy][:use_backend_rules].each do |rule| %>
  <%= "use_backend #{rule}" %>
  <% end if configuration[:haproxy][:acl_list] %>