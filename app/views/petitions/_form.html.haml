.row
.right.subtle
  %abbr * required field

= simple_form_for @petition, url: post_path, validate: true, wrapper: :compact, html: { id: 'petition_form', multipart: show_details, class: "petition-form", novalidate: "true"} do |f|
  = f.input :effort_id, as: 'hidden', input_html: { value: @effort.id } if @effort
  = f.input :group_id,  as: 'hidden', input_html: { value: @group.id } if @group

  = f.input :source,    as: 'hidden', input_html: { value: params[:source] } if @petition.source.nil?

  = input_field_for_petition(f, :title, "Petition title", cf('petition_form_title_help'))

  - if show_details
    .upload-image-box-horizontal
      .upload-image.upload-image-switcher{'data-changed-placeholder-url' => asset_path('image-placeholder-form-changed.png') }
        .preview-image
          = image_content(entity: @petition, style: :form, content_class: 'preview-image')
        .arrow
        .upload-field
          = f.input :image,
            as: :file,
            label: 'Upload an image', input_html: { accept: 'image/jpeg,image/gif,image/png' }
        .clear

  = input_field_for_petition(f, :who, 'Whom are you petitioning?',  cf('petition_form_whom_help'))
  = input_field_for_petition(f, :what, 'What do you want them to do?', cf('petition_form_what_help'), {rows: 6, maxlength: 5000})
  = input_field_for_petition(f, :why, 'Why is this important?', cf('petition_form_why_help'), {rows: 6, maxlength: 5000})

  - if show_details
    = input_field_for_petition(f, :delivery_details, 'How do you plan to deliver the petition?', 'Will you email the signatures, deliver them in person or stage a press conference?', {rows: 6, maxlength: 5000})
    = input_field_for_petition(f, :external_facebook_page, 'Facebook page URL',  cf('petition_form_external_facebook_page_help'))
    = input_field_for_petition(f, :external_site, 'External site URL',  cf('petition_form_external_site_help'))
  - if current_organisation.show_petition_category_on_creation? || show_details
    = render partial: '/petitions/form_categories', locals: { f: f }
  - if ask_for_location?
    #location-container{'data-location-help-text' => cf('petition_form_where_help'),'data-location-kind'  => @petition.location ? (@petition.location.query.present? ? 'local' : 'custom') : 'national', 'data-location-query' => @petition.location ? @petition.location.query : ""}
    %script{ type: 'text/javascript', src:'http://maps.googleapis.com/maps/api/js?libraries=places&sensor=true'}
    = javascript_include_tag 'location'
  .mt30
  .actions#petition-save-button
    = f.button :submit, class: 'btn-primary submit-button', disable_with: 'Savingâ€¦'
    - if @petition.id
      = link_to 'Cancel', cancel_path, class: 'btn btn-secondary', id: 'cancel-edit-btn'

.row.mt20

- if defined?(suppress_popover) && suppress_popover
  %script $(petitions.initForm(false));
- else
  %script $(petitions.initForm(true));
